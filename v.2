import * as Location from "expo-location";
import * as Notifications from "expo-notifications";
import * as TaskManager from "expo-task-manager";
import { useEffect, useState } from "react";
import { ActivityIndicator, StyleSheet, Text, View } from "react-native";
import MapView, { Marker } from "react-native-maps";

// Nombre de la tarea en background
const LOCATION_TASK_NAME = "background-location-task";

// Centro del sector: Pitalito Huila
const sectorCenter = { latitude: 1.8537, longitude: -76.0515 };
const movementRadius = 0.01; // ~1km

// Formula para calcular distancia (en metros)
const getDistance = (lat1, lon1, lat2, lon2) => {
  const R = 6371e3;
  const toRad = (deg) => (deg * Math.PI) / 180;
  const φ1 = toRad(lat1);
  const φ2 = toRad(lat2);
  const Δφ = toRad(lat2 - lat1);
  const Δλ = toRad(lon2 - lon1);

  const a =
    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);

  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
};

// Generar posición random del camión
const getRandomTruckLocation = () => {
  const latOffset = (Math.random() * 2 - 1) * movementRadius;
  const lngOffset = (Math.random() * 2 - 1) * movementRadius;
  return {
    latitude: sectorCenter.latitude + latOffset,
    longitude: sectorCenter.longitude + lngOffset,
  };
};

// Definir la tarea en background
TaskManager.defineTask(LOCATION_TASK_NAME, async ({ data, error }) => {
  if (error) return;

  if (data) {
    const { locations } = data;
    const user = locations[0].coords;

    // Generamos nueva ubicación del camión simulada
    const truck = getRandomTruckLocation();

    // Calcular distancia
    const dist = getDistance(
      user.latitude,
      user.longitude,
      truck.latitude,
      truck.longitude
    );

    if (dist < 500) {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "🚛 El camión está cerca",
          body: "El camión pasó a menos de 500m de tu ubicación.",
        },
        trigger: null,
      });
    }
  }
});

export default function HomeScreen() {
  const [userLocation, setUserLocation] = useState(null);
  const [truckLocation, setTruckLocation] = useState(null);
  const [loading, setLoading] = useState(true);

  // Configurar permisos
  useEffect(() => {
    (async () => {
      // Permiso de ubicación
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        alert("Permiso de ubicación denegado");
        return;
      }
      await Location.requestBackgroundPermissionsAsync();

      // Permiso de notificaciones
      await Notifications.requestPermissionsAsync();

      // Obtener ubicación inicial
      let loc = await Location.getCurrentPositionAsync({});
      setUserLocation({
        latitude: loc.coords.latitude,
        longitude: loc.coords.longitude,
      });

      // Activar rastreo en background
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.High,
        timeInterval: 5000, // cada 5s
        distanceInterval: 10, // o cada 10 metros
        showsBackgroundLocationIndicator: true, // iOS
        foregroundService: {
          notificationTitle: "Rastreo en segundo plano",
          notificationBody: "La app está rastreando tu ubicación",
        },
      });

      // También mostrar camión en pantalla
      setInterval(() => {
        setTruckLocation(getRandomTruckLocation());
      }, 5000);

      setLoading(false);
    })();
  }, []);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#2e7d32" />
        <Text>Obteniendo ubicación...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Rastreo Camión Pitalito 🚛</Text>
      {userLocation && (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: userLocation.latitude,
            longitude: userLocation.longitude,
            latitudeDelta: 0.05,
            longitudeDelta: 0.05,
          }}
        >
          <Marker
            coordinate={userLocation}
            title="Tu ubicación"
            pinColor="#4285F4"
          />
          {truckLocation && (
            <Marker
              coordinate={truckLocation}
              title="Camión"
              pinColor="#0F9D58"
            />
          )}
        </MapView>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: "#f5f5f5" },
  loadingContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
  },
  map: { width: "100%", height: "80%", borderRadius: 10 },
});
